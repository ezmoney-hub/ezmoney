/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetBudgetsQueryResponse, GetBudgets400 } from '../types/GetBudgets'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { getBudgets } from '../axios/getBudgets'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getBudgetsQueryKey = () => [{ url: '/budgets' }] as const

export type GetBudgetsQueryKey = ReturnType<typeof getBudgetsQueryKey>

export function getBudgetsQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getBudgetsQueryKey()
  return queryOptions<GetBudgetsQueryResponse, ResponseErrorConfig<GetBudgets400>, GetBudgetsQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getBudgets(config)
    },
  })
}

/**
 * @summary Get all budgets
 * {@link /budgets}
 */
export function useGetBudgets<TData = GetBudgetsQueryResponse, TQueryData = GetBudgetsQueryResponse, TQueryKey extends QueryKey = GetBudgetsQueryKey>(
  options: {
    query?: Partial<QueryObserverOptions<GetBudgetsQueryResponse, ResponseErrorConfig<GetBudgets400>, TData, TQueryData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getBudgetsQueryKey()

  const query = useQuery(
    {
      ...getBudgetsQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetBudgets400>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}