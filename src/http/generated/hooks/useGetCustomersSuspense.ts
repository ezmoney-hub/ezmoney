/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetCustomersQueryResponse, GetCustomers400 } from '../types/GetCustomers'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { getCustomers } from '../axios/getCustomers'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getCustomersSuspenseQueryKey = () => [{ url: '/customers' }] as const

export type GetCustomersSuspenseQueryKey = ReturnType<typeof getCustomersSuspenseQueryKey>

export function getCustomersSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getCustomersSuspenseQueryKey()
  return queryOptions<GetCustomersQueryResponse, ResponseErrorConfig<GetCustomers400>, GetCustomersQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getCustomers(config)
    },
  })
}

/**
 * @summary Get all customers
 * {@link /customers}
 */
export function useGetCustomersSuspense<TData = GetCustomersQueryResponse, TQueryKey extends QueryKey = GetCustomersSuspenseQueryKey>(
  options: {
    query?: Partial<UseSuspenseQueryOptions<GetCustomersQueryResponse, ResponseErrorConfig<GetCustomers400>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getCustomersSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...getCustomersSuspenseQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<GetCustomers400>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}