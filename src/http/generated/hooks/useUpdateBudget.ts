/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  UpdateBudgetMutationRequest,
  UpdateBudgetMutationResponse,
  UpdateBudgetPathParams,
  UpdateBudget400,
  UpdateBudget404,
  UpdateBudget409,
} from '../types/UpdateBudget'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { updateBudget } from '../axios/updateBudget'
import { useMutation } from '@tanstack/react-query'

export const updateBudgetMutationKey = () => [{ url: '/budgets/{id}' }] as const

export type UpdateBudgetMutationKey = ReturnType<typeof updateBudgetMutationKey>

/**
 * @summary Update a budget
 * {@link /budgets/:id}
 */
export function useUpdateBudget<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateBudgetMutationResponse,
      ResponseErrorConfig<UpdateBudget400 | UpdateBudget404 | UpdateBudget409>,
      { id: UpdateBudgetPathParams['id']; data?: UpdateBudgetMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateBudgetMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateBudgetMutationKey()

  return useMutation<
    UpdateBudgetMutationResponse,
    ResponseErrorConfig<UpdateBudget400 | UpdateBudget404 | UpdateBudget409>,
    { id: UpdateBudgetPathParams['id']; data?: UpdateBudgetMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return updateBudget(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}