/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { CreateCategoryMutationRequest, CreateCategoryMutationResponse, CreateCategory400, CreateCategory409 } from '../types/CreateCategory'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { createCategory } from '../axios/createCategory'
import { useMutation } from '@tanstack/react-query'

export const createCategoryMutationKey = () => [{ url: '/categories' }] as const

export type CreateCategoryMutationKey = ReturnType<typeof createCategoryMutationKey>

/**
 * @summary Create a new category
 * {@link /categories}
 */
export function useCreateCategory<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateCategoryMutationResponse,
      ResponseErrorConfig<CreateCategory400 | CreateCategory409>,
      { data: CreateCategoryMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CreateCategoryMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? createCategoryMutationKey()

  return useMutation<
    CreateCategoryMutationResponse,
    ResponseErrorConfig<CreateCategory400 | CreateCategory409>,
    { data: CreateCategoryMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return createCategory(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}