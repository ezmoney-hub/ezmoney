/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  UpdateTransactionMutationRequest,
  UpdateTransactionMutationResponse,
  UpdateTransactionPathParams,
  UpdateTransaction400,
  UpdateTransaction404,
} from '../types/UpdateTransaction'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { updateTransaction } from '../axios/updateTransaction'
import { useMutation } from '@tanstack/react-query'

export const updateTransactionMutationKey = () => [{ url: '/transactions/{id}' }] as const

export type UpdateTransactionMutationKey = ReturnType<typeof updateTransactionMutationKey>

/**
 * @summary Edit a transaction
 * {@link /transactions/:id}
 */
export function useUpdateTransaction<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateTransactionMutationResponse,
      ResponseErrorConfig<UpdateTransaction400 | UpdateTransaction404>,
      { id: UpdateTransactionPathParams['id']; data: UpdateTransactionMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateTransactionMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateTransactionMutationKey()

  return useMutation<
    UpdateTransactionMutationResponse,
    ResponseErrorConfig<UpdateTransaction400 | UpdateTransaction404>,
    { id: UpdateTransactionPathParams['id']; data: UpdateTransactionMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return updateTransaction(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}