/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetBankAccountsQueryResponse } from '../types/GetBankAccounts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { getBankAccounts } from '../axios/getBankAccounts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getBankAccountsQueryKey = () => [{ url: '/bank-accounts' }] as const

export type GetBankAccountsQueryKey = ReturnType<typeof getBankAccountsQueryKey>

export function getBankAccountsQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getBankAccountsQueryKey()
  return queryOptions<GetBankAccountsQueryResponse, ResponseErrorConfig<Error>, GetBankAccountsQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getBankAccounts(config)
    },
  })
}

/**
 * @summary Get all bank accounts categorized by type
 * {@link /bank-accounts}
 */
export function useGetBankAccounts<
  TData = GetBankAccountsQueryResponse,
  TQueryData = GetBankAccountsQueryResponse,
  TQueryKey extends QueryKey = GetBankAccountsQueryKey,
>(
  options: {
    query?: Partial<QueryObserverOptions<GetBankAccountsQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getBankAccountsQueryKey()

  const query = useQuery(
    {
      ...getBankAccountsQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}