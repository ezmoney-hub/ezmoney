/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { DeleteTransactionMutationResponse, DeleteTransactionPathParams, DeleteTransaction400, DeleteTransaction404 } from '../types/DeleteTransaction'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { deleteTransaction } from '../axios/deleteTransaction'
import { useMutation } from '@tanstack/react-query'

export const deleteTransactionMutationKey = () => [{ url: '/transactions/{id}' }] as const

export type DeleteTransactionMutationKey = ReturnType<typeof deleteTransactionMutationKey>

/**
 * @summary Delete a transaction
 * {@link /transactions/:id}
 */
export function useDeleteTransaction<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeleteTransactionMutationResponse,
      ResponseErrorConfig<DeleteTransaction400 | DeleteTransaction404>,
      { id: DeleteTransactionPathParams['id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? deleteTransactionMutationKey()

  return useMutation<
    DeleteTransactionMutationResponse,
    ResponseErrorConfig<DeleteTransaction400 | DeleteTransaction404>,
    { id: DeleteTransactionPathParams['id'] },
    TContext
  >(
    {
      mutationFn: async ({ id }) => {
        return deleteTransaction(id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}