/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { CreateCustomerMutationRequest, CreateCustomerMutationResponse, CreateCustomer400, CreateCustomer409 } from '../types/CreateCustomer'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { createCustomer } from '../axios/createCustomer'
import { useMutation } from '@tanstack/react-query'

export const createCustomerMutationKey = () => [{ url: '/customers' }] as const

export type CreateCustomerMutationKey = ReturnType<typeof createCustomerMutationKey>

/**
 * @summary Create a new customer
 * {@link /customers}
 */
export function useCreateCustomer<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateCustomerMutationResponse,
      ResponseErrorConfig<CreateCustomer400 | CreateCustomer409>,
      { data: CreateCustomerMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CreateCustomerMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? createCustomerMutationKey()

  return useMutation<
    CreateCustomerMutationResponse,
    ResponseErrorConfig<CreateCustomer400 | CreateCustomer409>,
    { data: CreateCustomerMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return createCustomer(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}