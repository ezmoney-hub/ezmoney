/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { CreateBankAccountMutationRequest, CreateBankAccountMutationResponse, CreateBankAccount400 } from '../types/CreateBankAccount'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { createBankAccount } from '../axios/createBankAccount'
import { useMutation } from '@tanstack/react-query'

export const createBankAccountMutationKey = () => [{ url: '/bank-accounts' }] as const

export type CreateBankAccountMutationKey = ReturnType<typeof createBankAccountMutationKey>

/**
 * @summary Create a new bank account
 * {@link /bank-accounts}
 */
export function useCreateBankAccount<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateBankAccountMutationResponse,
      ResponseErrorConfig<CreateBankAccount400>,
      { data: CreateBankAccountMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CreateBankAccountMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? createBankAccountMutationKey()

  return useMutation<CreateBankAccountMutationResponse, ResponseErrorConfig<CreateBankAccount400>, { data: CreateBankAccountMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return createBankAccount(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}