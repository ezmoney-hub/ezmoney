/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { SignUpMutationRequest, SignUpMutationResponse, SignUp400, SignUp409 } from '../types/SignUp'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { signUp } from '../axios/signUp'
import { useMutation } from '@tanstack/react-query'

export const signUpMutationKey = () => [{ url: '/auth/sign-up' }] as const

export type SignUpMutationKey = ReturnType<typeof signUpMutationKey>

/**
 * @summary Register a new user
 * {@link /auth/sign-up}
 */
export function useSignUp<TContext>(
  options: {
    mutation?: UseMutationOptions<SignUpMutationResponse, ResponseErrorConfig<SignUp400 | SignUp409>, { data: SignUpMutationRequest }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<SignUpMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? signUpMutationKey()

  return useMutation<SignUpMutationResponse, ResponseErrorConfig<SignUp400 | SignUp409>, { data: SignUpMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return signUp(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}