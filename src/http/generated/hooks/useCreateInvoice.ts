/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { CreateInvoiceMutationRequest, CreateInvoiceMutationResponse, CreateInvoice400, CreateInvoice404 } from '../types/CreateInvoice'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { createInvoice } from '../axios/createInvoice'
import { useMutation } from '@tanstack/react-query'

export const createInvoiceMutationKey = () => [{ url: '/invoices' }] as const

export type CreateInvoiceMutationKey = ReturnType<typeof createInvoiceMutationKey>

/**
 * @summary Create a new invoice
 * {@link /invoices}
 */
export function useCreateInvoice<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateInvoiceMutationResponse,
      ResponseErrorConfig<CreateInvoice400 | CreateInvoice404>,
      { data: CreateInvoiceMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CreateInvoiceMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? createInvoiceMutationKey()

  return useMutation<CreateInvoiceMutationResponse, ResponseErrorConfig<CreateInvoice400 | CreateInvoice404>, { data: CreateInvoiceMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return createInvoice(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}