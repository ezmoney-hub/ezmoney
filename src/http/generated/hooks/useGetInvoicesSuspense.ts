/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetInvoicesQueryResponse, GetInvoices400 } from '../types/GetInvoices'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { getInvoices } from '../axios/getInvoices'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getInvoicesSuspenseQueryKey = () => [{ url: '/invoices' }] as const

export type GetInvoicesSuspenseQueryKey = ReturnType<typeof getInvoicesSuspenseQueryKey>

export function getInvoicesSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getInvoicesSuspenseQueryKey()
  return queryOptions<GetInvoicesQueryResponse, ResponseErrorConfig<GetInvoices400>, GetInvoicesQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getInvoices(config)
    },
  })
}

/**
 * @summary Get all invoices
 * {@link /invoices}
 */
export function useGetInvoicesSuspense<TData = GetInvoicesQueryResponse, TQueryKey extends QueryKey = GetInvoicesSuspenseQueryKey>(
  options: {
    query?: Partial<UseSuspenseQueryOptions<GetInvoicesQueryResponse, ResponseErrorConfig<GetInvoices400>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getInvoicesSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...getInvoicesSuspenseQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as UseSuspenseQueryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<GetInvoices400>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}