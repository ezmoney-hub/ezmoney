/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  UpdateBankAccountMutationRequest,
  UpdateBankAccountMutationResponse,
  UpdateBankAccountPathParams,
  UpdateBankAccount400,
  UpdateBankAccount404,
} from '../types/UpdateBankAccount'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { updateBankAccount } from '../axios/updateBankAccount'
import { useMutation } from '@tanstack/react-query'

export const updateBankAccountMutationKey = () => [{ url: '/bank-accounts/{id}' }] as const

export type UpdateBankAccountMutationKey = ReturnType<typeof updateBankAccountMutationKey>

/**
 * @summary Edit a bank account
 * {@link /bank-accounts/:id}
 */
export function useUpdateBankAccount<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateBankAccountMutationResponse,
      ResponseErrorConfig<UpdateBankAccount400 | UpdateBankAccount404>,
      { id: UpdateBankAccountPathParams['id']; data?: UpdateBankAccountMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateBankAccountMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateBankAccountMutationKey()

  return useMutation<
    UpdateBankAccountMutationResponse,
    ResponseErrorConfig<UpdateBankAccount400 | UpdateBankAccount404>,
    { id: UpdateBankAccountPathParams['id']; data?: UpdateBankAccountMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return updateBankAccount(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}