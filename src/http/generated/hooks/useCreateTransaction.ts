/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  CreateTransactionMutationRequest,
  CreateTransactionMutationResponse,
  CreateTransaction400,
  CreateTransaction404,
} from '../types/CreateTransaction'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { createTransaction } from '../axios/createTransaction'
import { useMutation } from '@tanstack/react-query'

export const createTransactionMutationKey = () => [{ url: '/transactions' }] as const

export type CreateTransactionMutationKey = ReturnType<typeof createTransactionMutationKey>

/**
 * @summary Create a new transaction
 * {@link /transactions}
 */
export function useCreateTransaction<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateTransactionMutationResponse,
      ResponseErrorConfig<CreateTransaction400 | CreateTransaction404>,
      { data: CreateTransactionMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CreateTransactionMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? createTransactionMutationKey()

  return useMutation<
    CreateTransactionMutationResponse,
    ResponseErrorConfig<CreateTransaction400 | CreateTransaction404>,
    { data: CreateTransactionMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return createTransaction(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}