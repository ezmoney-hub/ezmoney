/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  MarkInstallmentAsUnpaidMutationResponse,
  MarkInstallmentAsUnpaidPathParams,
  MarkInstallmentAsUnpaid400,
  MarkInstallmentAsUnpaid404,
} from '../types/MarkInstallmentAsUnpaid'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { markInstallmentAsUnpaid } from '../axios/markInstallmentAsUnpaid'
import { useMutation } from '@tanstack/react-query'

export const markInstallmentAsUnpaidMutationKey = () => [{ url: '/installments/{installmentId}/unpay' }] as const

export type MarkInstallmentAsUnpaidMutationKey = ReturnType<typeof markInstallmentAsUnpaidMutationKey>

/**
 * @summary Mark installment as unpaid
 * {@link /installments/:installmentId/unpay}
 */
export function useMarkInstallmentAsUnpaid<TContext>(
  options: {
    mutation?: UseMutationOptions<
      MarkInstallmentAsUnpaidMutationResponse,
      ResponseErrorConfig<MarkInstallmentAsUnpaid400 | MarkInstallmentAsUnpaid404>,
      { installmentId: MarkInstallmentAsUnpaidPathParams['installmentId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? markInstallmentAsUnpaidMutationKey()

  return useMutation<
    MarkInstallmentAsUnpaidMutationResponse,
    ResponseErrorConfig<MarkInstallmentAsUnpaid400 | MarkInstallmentAsUnpaid404>,
    { installmentId: MarkInstallmentAsUnpaidPathParams['installmentId'] },
    TContext
  >(
    {
      mutationFn: async ({ installmentId }) => {
        return markInstallmentAsUnpaid(installmentId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}