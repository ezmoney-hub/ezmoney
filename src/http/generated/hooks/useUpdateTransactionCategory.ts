/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  UpdateTransactionCategoryMutationRequest,
  UpdateTransactionCategoryMutationResponse,
  UpdateTransactionCategoryPathParams,
  UpdateTransactionCategory400,
  UpdateTransactionCategory404,
} from '../types/UpdateTransactionCategory'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { updateTransactionCategory } from '../axios/updateTransactionCategory'
import { useMutation } from '@tanstack/react-query'

export const updateTransactionCategoryMutationKey = () => [{ url: '/transactions/{transactionId}/category' }] as const

export type UpdateTransactionCategoryMutationKey = ReturnType<typeof updateTransactionCategoryMutationKey>

/**
 * @summary Update transaction category
 * {@link /transactions/:transactionId/category}
 */
export function useUpdateTransactionCategory<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateTransactionCategoryMutationResponse,
      ResponseErrorConfig<UpdateTransactionCategory400 | UpdateTransactionCategory404>,
      { transactionId: UpdateTransactionCategoryPathParams['transactionId']; data: UpdateTransactionCategoryMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateTransactionCategoryMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateTransactionCategoryMutationKey()

  return useMutation<
    UpdateTransactionCategoryMutationResponse,
    ResponseErrorConfig<UpdateTransactionCategory400 | UpdateTransactionCategory404>,
    { transactionId: UpdateTransactionCategoryPathParams['transactionId']; data: UpdateTransactionCategoryMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ transactionId, data }) => {
        return updateTransactionCategory(transactionId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}