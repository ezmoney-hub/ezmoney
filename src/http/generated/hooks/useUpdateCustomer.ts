/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  UpdateCustomerMutationRequest,
  UpdateCustomerMutationResponse,
  UpdateCustomerPathParams,
  UpdateCustomer400,
  UpdateCustomer404,
  UpdateCustomer409,
} from '../types/UpdateCustomer'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { updateCustomer } from '../axios/updateCustomer'
import { useMutation } from '@tanstack/react-query'

export const updateCustomerMutationKey = () => [{ url: '/customers/{id}' }] as const

export type UpdateCustomerMutationKey = ReturnType<typeof updateCustomerMutationKey>

/**
 * @summary Update a customer
 * {@link /customers/:id}
 */
export function useUpdateCustomer<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateCustomerMutationResponse,
      ResponseErrorConfig<UpdateCustomer400 | UpdateCustomer404 | UpdateCustomer409>,
      { id: UpdateCustomerPathParams['id']; data?: UpdateCustomerMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateCustomerMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateCustomerMutationKey()

  return useMutation<
    UpdateCustomerMutationResponse,
    ResponseErrorConfig<UpdateCustomer400 | UpdateCustomer404 | UpdateCustomer409>,
    { id: UpdateCustomerPathParams['id']; data?: UpdateCustomerMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return updateCustomer(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}