/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { SignInMutationRequest, SignInMutationResponse, SignIn400, SignIn401 } from '../types/SignIn'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { signIn } from '../axios/signIn'
import { useMutation } from '@tanstack/react-query'

export const signInMutationKey = () => [{ url: '/auth/sign-in' }] as const

export type SignInMutationKey = ReturnType<typeof signInMutationKey>

/**
 * @summary Authenticate a user
 * {@link /auth/sign-in}
 */
export function useSignIn<TContext>(
  options: {
    mutation?: UseMutationOptions<SignInMutationResponse, ResponseErrorConfig<SignIn400 | SignIn401>, { data: SignInMutationRequest }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<SignInMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? signInMutationKey()

  return useMutation<SignInMutationResponse, ResponseErrorConfig<SignIn400 | SignIn401>, { data: SignInMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return signIn(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}