/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetExpensesByCategoryQueryResponse, GetExpensesByCategoryQueryParams, GetExpensesByCategory400 } from '../types/GetExpensesByCategory'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { getExpensesByCategory } from '../axios/getExpensesByCategory'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getExpensesByCategoryQueryKey = (params?: GetExpensesByCategoryQueryParams) =>
  [{ url: '/categories/expenses' }, ...(params ? [params] : [])] as const

export type GetExpensesByCategoryQueryKey = ReturnType<typeof getExpensesByCategoryQueryKey>

export function getExpensesByCategoryQueryOptions(params?: GetExpensesByCategoryQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getExpensesByCategoryQueryKey(params)
  return queryOptions<GetExpensesByCategoryQueryResponse, ResponseErrorConfig<GetExpensesByCategory400>, GetExpensesByCategoryQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getExpensesByCategory(params, config)
    },
  })
}

/**
 * @summary Get expenses by category
 * {@link /categories/expenses}
 */
export function useGetExpensesByCategory<
  TData = GetExpensesByCategoryQueryResponse,
  TQueryData = GetExpensesByCategoryQueryResponse,
  TQueryKey extends QueryKey = GetExpensesByCategoryQueryKey,
>(
  params?: GetExpensesByCategoryQueryParams,
  options: {
    query?: Partial<QueryObserverOptions<GetExpensesByCategoryQueryResponse, ResponseErrorConfig<GetExpensesByCategory400>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getExpensesByCategoryQueryKey(params)

  const query = useQuery(
    {
      ...getExpensesByCategoryQueryOptions(params, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetExpensesByCategory400>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}