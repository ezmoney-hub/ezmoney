/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  GetInvoicesInstallmentsQueryResponse,
  GetInvoicesInstallmentsPathParams,
  GetInvoicesInstallments400,
  GetInvoicesInstallments404,
} from '../types/GetInvoicesInstallments'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { getInvoicesInstallments } from '../axios/getInvoicesInstallments'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getInvoicesInstallmentsQueryKey = (invoiceId: GetInvoicesInstallmentsPathParams['invoiceId']) =>
  [{ url: '/invoices/:invoiceId/installments', params: { invoiceId: invoiceId } }] as const

export type GetInvoicesInstallmentsQueryKey = ReturnType<typeof getInvoicesInstallmentsQueryKey>

export function getInvoicesInstallmentsQueryOptions(
  invoiceId: GetInvoicesInstallmentsPathParams['invoiceId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getInvoicesInstallmentsQueryKey(invoiceId)
  return queryOptions<
    GetInvoicesInstallmentsQueryResponse,
    ResponseErrorConfig<GetInvoicesInstallments400 | GetInvoicesInstallments404>,
    GetInvoicesInstallmentsQueryResponse,
    typeof queryKey
  >({
    enabled: !!invoiceId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getInvoicesInstallments(invoiceId, config)
    },
  })
}

/**
 * @summary Get invoice installments
 * {@link /invoices/:invoiceId/installments}
 */
export function useGetInvoicesInstallments<
  TData = GetInvoicesInstallmentsQueryResponse,
  TQueryData = GetInvoicesInstallmentsQueryResponse,
  TQueryKey extends QueryKey = GetInvoicesInstallmentsQueryKey,
>(
  invoiceId: GetInvoicesInstallmentsPathParams['invoiceId'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetInvoicesInstallmentsQueryResponse,
        ResponseErrorConfig<GetInvoicesInstallments400 | GetInvoicesInstallments404>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getInvoicesInstallmentsQueryKey(invoiceId)

  const query = useQuery(
    {
      ...getInvoicesInstallmentsQueryOptions(invoiceId, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetInvoicesInstallments400 | GetInvoicesInstallments404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}