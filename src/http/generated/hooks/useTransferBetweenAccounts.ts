/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  TransferBetweenAccountsMutationRequest,
  TransferBetweenAccountsMutationResponse,
  TransferBetweenAccounts400,
  TransferBetweenAccounts404,
} from '../types/TransferBetweenAccounts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { transferBetweenAccounts } from '../axios/transferBetweenAccounts'
import { useMutation } from '@tanstack/react-query'

export const transferBetweenAccountsMutationKey = () => [{ url: '/bank-accounts/transfer' }] as const

export type TransferBetweenAccountsMutationKey = ReturnType<typeof transferBetweenAccountsMutationKey>

/**
 * @summary Transfer money between bank accounts
 * {@link /bank-accounts/transfer}
 */
export function useTransferBetweenAccounts<TContext>(
  options: {
    mutation?: UseMutationOptions<
      TransferBetweenAccountsMutationResponse,
      ResponseErrorConfig<TransferBetweenAccounts400 | TransferBetweenAccounts404>,
      { data: TransferBetweenAccountsMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<TransferBetweenAccountsMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? transferBetweenAccountsMutationKey()

  return useMutation<
    TransferBetweenAccountsMutationResponse,
    ResponseErrorConfig<TransferBetweenAccounts400 | TransferBetweenAccounts404>,
    { data: TransferBetweenAccountsMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return transferBetweenAccounts(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}